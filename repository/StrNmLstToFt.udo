/*
StrNmLstToFt - transforms a string containing a list of numbers to a function table

DESCRIPTION
transforms a string containing a list of numbers to a function table. elements can be seperated by any number of spaces or tabs. allows math expressions with one +, -, *, /, ^ or % (no parenthesis at the moment). for powers also a ratio is allowed as exponent, e.g. 2^1/12. if no number for the ftable is given, ftgen is called with ifn=0

SYNTAX
iftout StrNmLstToFt Snumstring, iftno

INITIALIZATION
Snumstring - string containing a list of numbers, seperated by any number of spaces or tabs. math expressions with one +, -, *, /, ^ or % are allowed (no parenthesis). for powers also a ratio is allowed as exponent, e.g. 2^1/12
iftno - number of the returned function table. if 0 (which is also the default), an automatic number is generated by csound
iftout - output function table. the length is the same as the number of elements in Snumstring. if there is no, or just one element in Snumstring, the length is 2 and the extra positions are filled with 0

CREDITS
joachim heintz 2010
*/

  opcode StrNmLstToFt, i, So
;transforms a string containing a list of numbers to a function table. elements can be seperated by any number of spaces or tabs. allows math expressions with one +, -, *, /, ^ or % (no parenthesis at the moment). for powers also a ratio is allowed as exponent, e.g. 2^1/12. if no number for the ftable is given, ftgen is called with ifn=0
String, iftno	xin
;; 1. REMOVE ALL DUPLICATE SPACES OR TABS IN String AND RETURNS Stright AS A STRING WHICH FIELDS ARE SEPERATED BY JUST EXACTLY ONE SPACE, AND THE NUMBER OF ELEMENTS
Stright	=		""
ihowmany	=		0
el:
;make sure that string is without initial spaces or tabs
again:
ispace		strindex	String, " "
itab		strindex	String, "	"
if ispace == 0 || itab == 0 then
String		strsub		String, 1
iagain		=		1
else
iagain		=		0
endif
if iagain == 1 igoto again
inextsp 	strindex 	String, " "; position of next space
inextab 	strindex 	String, "	"; position of next tab
inext		=		(inextsp > 0 && inextab < 0 ? inextsp : (inextab > 0 && inextsp < 0 ? inextab : (inextsp < inextab ? inextsp : inextab)))
Sel		strsub		String, 0, inext; this element
ilenel		strlen		Sel
if ilenel > 0 then
Sel		strcat		" ", Sel; prepend a space if Sel is not the last el
ihowmany	=		ihowmany + 1; increase the counter
endif
Stright	strcat		Stright, Sel
if inext == -1 then
String		=		""; either this is the last element
else
String 	strsub 	String, inext+1; or take the next part
endif
irest		strlen		String
if irest > 0 igoto el; go back if there is anything
Stright	strsub		Stright, 1; remove first prepended space
;; 2. TRANSFORMS A STRING OF NUMBERS WHICH ARE SEPERATED BY EXATELY ONE SPACE TO A FUNCTION TABLE CONTAINING THESE NUMBERS RESPECTIVE EXPRESSIONS.
ihowmany	=		(ihowmany < 2 ? 2 : ihowmany)
iftout 	ftgen 		iftno, 0, -ihowmany, -2, 0
indx		=		0
loop:
inext 		strindex 	Stright, " "; position of next space
Snum		strsub		Stright, 0, inext; number or expression as string
inumlen	strlen		Snum
;test if Snum is an math expression
isum		strindex	Snum, "+"; sum
idif		strindex	Snum, "-"; difference
ipro		strindex	Snum, "*"; product
irat		strindex	Snum, "/"; ratio
ipow		strindex	Snum, "^"; power
imod		strindex	Snum, "%"; modulo
if inumlen == 0 then
inum		=		0; returns 0 for an empty string
elseif ipow > -1 then
ifirst		strindex	Snum, "^"
S1		strsub		Snum, 0, ifirst
S2		strsub		Snum, ifirst+1
iratio		strindex	S2, "/"
ifirst		strtod		S1
if iratio == -1 then
isec		strtod		S2
else
Snumer		strsub		S2, 0, iratio
Sdenom		strsub		S2, iratio+1
inumer		strtod		Snumer
idenom		strtod		Sdenom
isec		=		inumer / idenom
endif
inum		=		ifirst ^ isec
elseif imod > -1 then
ifirst		strindex	Snum, "%"
S1		strsub		Snum, 0, ifirst
S2		strsub		Snum, ifirst+1
ifirst		strtod		S1
isec		strtod		S2
inum		=		ifirst % isec
elseif ipro > -1 then
ifirst		strindex	Snum, "*"
S1		strsub		Snum, 0, ifirst
S2		strsub		Snum, ifirst+1
ifirst		strtod		S1
isec		strtod		S2
inum		=		ifirst * isec
elseif irat > -1 then
ifirst		strindex	Snum, "/"
S1		strsub		Snum, 0, ifirst
S2		strsub		Snum, ifirst+1
ifirst		strtod		S1
isec		strtod		S2
inum		=		ifirst / isec
elseif isum > -1 then 
ifirst		strindex	Snum, "+"
S1		strsub		Snum, 0, ifirst
S2		strsub		Snum, ifirst+1
ifirst		strtod		S1
isec		strtod		S2
inum		=		ifirst + isec
elseif idif > -1 then
ifirst		strrindex	Snum, "-";(last occurrence: -3-4 is possible, but not 3--4)
S1		strsub		Snum, 0, ifirst
S2		strsub		Snum, ifirst+1
ifirst		strtod		S1
isec		strtod		S2
inum		=		ifirst - isec
else
inum		strtod		Snum
endif
		tabw_i 	inum, indx, iftout;write correct value as float in iftout
Stright 	strsub 	Stright, inext+1; take the next part
indx		=		indx + 1; increase write index
 if inext > -1 igoto loop
			xout			iftout
  endop

 
