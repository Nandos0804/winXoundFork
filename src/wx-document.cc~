/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * winxound_gtkmm
 * Copyright (C) Stefano Bonetti 2010 <stefano_bonetti@tin.it>
 * 
 * winxound_gtkmm is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * winxound_gtkmm is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "wx-document.h"
#include <iostream>


wxDocument::wxDocument() 	
{
	FileIsReadOnly = false;
	BookmarksOnLoad = true;
	//CurrentSyntaxLanguage = "none";
	FileName = '\0';
	
	this->CreateNewDocument();
	std::cerr << "wxDocument Created" << std::endl;
}
wxDocument::~wxDocument(void)
{	
	delete treeViewStructure;
	treeViewStructure = NULL;
	
	delete listBoxBookmarks;
	listBoxBookmarks = NULL;

	delete editor;
	editor = NULL;
	
	std::cerr << "wxDocument Released" << std::endl;
}

void wxDocument::SetOwner(wxMain* mainOwner)
{
	owner = mainOwner;
}


bool wxDocument::CreateNewDocument()
{

	editor = new wxEditor();
	intelliTip = new wxIntellitip();

	Gtk::VBox* vbox = new Gtk::VBox();
	//vbox->add(*editor);
	//vbox->add(*intelliTip);
	vbox->pack_start(*editor, TRUE, TRUE, 0);
	vbox->pack_start(*intelliTip, FALSE, FALSE, 0);
	
	//this->add2(*editor);
	this->add2(*vbox);

	//Add explorer pane
	treeViewStructure = new Gtk::TreeView();
	
	//ListViewText (guint columns_count, bool editable=false, Gtk::SelectionMode mode=Gtk::SELECTION_SINGLE)
	listBoxBookmarks = new Gtk::ListViewText(1, false, Gtk::SELECTION_SINGLE);

	Gtk::VPaned* VPane = new Gtk::VPaned();
	this->add1(*VPane);
	this->set_position(150);
	//VPane->add1(*treeViewStructure);
	//VPane->add2(*listBoxBookmarks);
	VPane->pack1(*treeViewStructure, TRUE, FALSE);
	VPane->pack2(*listBoxBookmarks, TRUE, FALSE);
	treeViewStructure->set_size_request(-1,20);
	//listBoxBookmarks->set_size_request(-1,20);

	VPane->show();
	//show_all();
	//show();


	//editor->getPrimaryView()->connect(sigc::mem_fun(*this, &wxDocument::on_SCI_NOTIFY));
	//"the" SCI signal (connect after initial setup(i.e. adding text))
	//sigc::mem_fun(*this, &wxMain::on_menuItemSave_Clicked)
	//G_CALLBACK(wxDocument::on_SCI_NOTIFY), editor);
	//sigc::mem_fun(*this, &wxDocument::on_SCI_NOTIFY)
	//gtk_signal_connect(GTK_OBJECT(PWidget(wEditor)), SCINTILLA_NOTIFY,
	//                   GtkSignalFunc(NotifySignal), this);
	//static void NotifySignal(GtkWidget *w, gint wParam, gpointer lParam, SciTEGTK *scitew);
	
	/*
	g_signal_connect(editor->getPrimaryView(), 
	                 SCINTILLA_NOTIFY, 
	                 G_CALLBACK(&wxDocument::on_SCI_NOTIFY), 
	                 editor);
	*/

	
	g_signal_connect(editor->getPrimaryView(), 
	                 SCINTILLA_NOTIFY, 
	                 GtkSignalFunc(&wxDocument::on_SCI_NOTIFY),
	                 this);
	

	show_all_children(); 
	show();
	
	return true;
}


void wxDocument::on_SCI_NOTIFY(GtkWidget *widget, gint wParam, gpointer lParam, gpointer data)
{
	//wxEditor *tempEditor = reinterpret_cast<wxEditor*>(data);
	wxDocument* _this = reinterpret_cast<wxDocument*>(data);
	SCNotification *nt = reinterpret_cast<SCNotification*>(lParam);
	
	//std::cerr << "on_SCI_NOTIFY" << nt->nmhdr.code << std::endl;

	switch (nt->nmhdr.code) //  nmhdr.code)
	{
		case SCN_SAVEPOINTLEFT:
		{
			std::cerr << "SCN_SAVEPOINTLEFT" << std::endl;
			break;
		}
		case SCN_SAVEPOINTREACHED:
		{
			std::cerr << "SCN_SAVEPOINTREACHED" << std::endl;
			break;
		}
		case SCN_MODIFYATTEMPTRO:
		{
			std::cerr << "SCN_MODIFYATTEMPTRO" << std::endl;
			break;
		}
		case SCN_MARGINCLICK:
			std::cerr << "SCN_MARGINCLICK" << std::endl;
			break;

		case SCN_UPDATEUI:
			//void g_signal_emit_by_name (gpointer instance, const gchar *detailed_signal, ...);
			std::cerr << "SCN_UPDATEUI" << std::endl;
			//gboolean retval;c
			//g_signal_emit_by_name(doc->editor, "document-updateui-notify", NULL);
			//owner->onDocumentUpdateUi(doc);
			_this->owner->onDocumentUpdateUi(_this);
			break;

 		case SCN_MODIFIED:
		{
			//if (editor_prefs.show_linenumber_margin && (nt->modificationType & (SC_MOD_INSERTTEXT | SC_MOD_DELETETEXT)) && nt->linesAdded)
			//{
			//	/* automatically adjust Scintilla's line numbers margin width */
			//	auto_update_margin_width(editor);
			//}

			//if (nt->modificationType & SC_STARTACTION && ! ignore_callback)
			//{
			//	/* get notified about undo changes */
			//	document_undo_add(doc, UNDO_SCINTILLA, NULL);
			//}
			//if (editor_prefs.folding && (nt->modificationType & SC_MOD_CHANGEFOLD) != 0)
			//{
			//	/* handle special fold cases, e.g. #1923350 */
			//	fold_changed(sci, nt->line, nt->foldLevelNow, nt->foldLevelPrev);
			//}
			std::cerr << "SCN_MODIFIED" << std::endl;
			break;
		}
		case SCN_CHARADDED:
			std::cerr << "SCN_CHARADDED" << std::endl;
			break;

		case SCN_USERLISTSELECTION:
		{
			std::cerr << "SCN_USERLISTSELECTION" << std::endl;
			break;
		}
		case SCN_AUTOCSELECTION:
			std::cerr << "SCN_AUTOCSELECTION" << std::endl;
			/* fall through */
		case SCN_AUTOCCANCELLED:
		{
			std::cerr << "SCN_AUTOCCANCELLED" << std::endl;
			break;
		}
		case SCN_NEEDSHOWN:
		{
			std::cerr << "SCN_NEEDSHOWN" << std::endl;
			break;
		}
		case SCN_URIDROPPED:
		{
			std::cerr << "SCN_URIDROPPED" << std::endl;
			break;
		}
		case SCN_CALLTIPCLICK:
		{
			std::cerr << "SCN_CALLTIPCLICK" << std::endl;
			break;
		}
	}

}


/*
void wxDocument::SetOpcodes(GHashTable* opc)
{
	Opcodes = opc;
}
*/

const gchar* wxDocument::FileType()
{

	//Set Highlight language
	//g_str_has_suffix(g_utf8_strdown(filename, -1), ".orc") 
	//if (textEditor.FileName.ToLower().EndsWith(".py") ||
	//    textEditor.FileName.ToLower().EndsWith(".pyw"))
	if(g_str_has_suffix(g_utf8_strdown(FileName, -1), ".py") ||
	   g_str_has_suffix(g_utf8_strdown(FileName, -1), ".pyw"))
	{
		//Python
		return "python";

	}
	//else if (textEditor.FileName.ToLower().EndsWith(".lua"))
	else if (g_str_has_suffix(g_utf8_strdown(FileName, -1), ".lua"))
	{
		//Lua
		return "lua";
	}
	//else if (textEditor.FileName.ToLower().EndsWith(".csd"))
	else if (g_str_has_suffix(g_utf8_strdown(FileName, -1), ".csd"))
	{
		//Csound
		return "csound";
	}

	return "none";
	
}

const gchar* wxDocument::getCurrentSyntaxLanguage()
{
	return mLanguage.c_str();
}

void wxDocument::StartExplorerTimer()
{

}

void wxDocument::SetFocus()
{
	this->editor->setFocus();
}


void wxDocument::ConfigureEditorForLua()
{

}

void wxDocument::ConfigureEditorForPython()
{

}

void wxDocument::ConfigureEditorForPythonMixed(GHashTable* opcodes)
{

}

void wxDocument::ConfigureEditorForCSound(GHashTable* Opcodes)
{
	try
	{
		mLanguage = "csound";

		if (Opcodes != NULL)
		{
			//Set Keywords list
			//Glib::ustring KeyWordList = "";
			std::string KeyWordList = "";

			//foreach (DictionaryEntry de in Opcodes)
			GHashTableIter iter;
			gpointer key, value;
			g_hash_table_iter_init (&iter, Opcodes);
			while (g_hash_table_iter_next (&iter, &key, &value)) 
			{
				/* do something with key and value */
				//if (de.Key.ToString() != "instr" && de.Key.ToString() != "endin")
				if(!g_str_equal(key, "instr") &&
				   !g_str_equal(key, "endin"))
				{
					KeyWordList.append((gchar*)key);
					KeyWordList.append(" ");
				}
			}

			this->editor->setKeyWords(0, KeyWordList.c_str());

			this->editor->setKeyWords(1, 
			                          "<CsVersion> </CsVersion> "
									  "<CsoundSynthesizer> </CsoundSynthesizer> "
									  "<CsOptions> </CsOptions> "
									  "<CsInstruments> </CsInstruments> "
									  "<CsScore> </CsScore> "
									  "<CsVersion> </CsVersion> "
									  "<CsLicence> </CsLicence> ");

			this->editor->setKeyWords(3, " instr endin ");
		}

		this->editor->setWordChars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.$_");

		this->SciEditSetFontsAndStyles();

	}
	catch (std::exception const& ex)
	{
		std::cerr << "wxEditor - ConfigureEditorForCSound:" << 
		          ex.what() << std::endl;
	}
}




void wxDocument::ConfigureEditorForText()
{
	mLanguage = "none";
}

void wxDocument::SciEditSetFontsAndStyles()
{

}
